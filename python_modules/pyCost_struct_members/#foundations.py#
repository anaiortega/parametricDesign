# -*- coding: utf-8 -*-

#Class to generate pyCost quantities of foundation elements

import math

class FootingBase(object):
    '''Base class to calculate quantities of a footing foundation.

    textComment:   string to comment each measuremt line generated 
    mnLength, mnWidth: mean length and width of the base of the footing, 
            so that its area can be calculated as 1*mnLength*mnWidth
    Hfooting: height of the footing
    ThickLeanConcr: Thickness of lean concrete under foundation
    excavHeight: mean heigth of excavation (from the bottom of lean concrete)
    excavSlope: slope of excavation (H:V)
    fillingHeight: mean heigth of filling (from the bottom of lean concrete)
    reinfQuant: reinforcement quantity
    Lformwork: length of formwork (defaults to Lside1+Lside2+Lside3+Lside4)
    Lexcav: lenght of excavation (defaults to Lside1+Lside2+Lside3+Lside4)
    '''

    def __init__(self,textComment,mnLength,mnWidth,Hfooting,ThickLeanConcr,excavHeight,excavSlope,fillingHeight,reinfQuant,Lformwork=None,Lexcav=None):
        self.textComment=textComment
        self.mnLength=mnLength
        self.mnWidth=mnWidth
        self.Hfooting=Hfooting
        self.ThickLeanConcr=ThickLeanConcr
        self.excavHeight=excavHeight
        self.excavSlope=excavSlope #H:V
        self.fillingHeight=fillingHeight
        self.reinfQuant=reinfQuant
        self.Lformwork=Lformwork
        self.Lexcav=Lexcav

    def getExcavation(self):
        '''Return excavation quantities to be added to a pyCost project
        '''
        qntLines=list()
        qntLines.append([self.textComment,1, self.mnLength, self.mnWidth, self.excavHeight])
        if self.Lexcav>0:
            qntLines.append([self.textComment,0.5,self.Lexcav,round(self.excavHeight*self.excavSlope,2),self.excavHeight])
        return qntLines

                                   
    def getLeanConcrete(self):
        '''Return lean concrete quantities to be added to a pyCost project
        '''
        qntLines=list()
        qntLines.append([self.textComment,1, self.mnLength, self.mnWidth, self.ThickLeanConcr])
        return qntLines

    def getFilling(self):
        '''Return filling material quantities to be added to a pyCost project
        '''
        qntLines=list()
        if self.fillingHeight>(self.Hfooting+self.ThickLeanConcr):
            qntLines.append([self.name,1, self.mnLength, self.mnWidth, self.fillingHeight-self.Hfooting-self.ThickLeanConcr])
        if self.Lexcav>0 and self.fillingHeight>0:
            qntLines.append([self.name,0.5,self.Lexcav,round(self.fillingHeight*self.excavSlope,2),self.fillingHeight])
        return qntLines

    def getFormwork(self):
        '''Return formwork quantities to be added to a pyCost project '''
        qntLines=list()
        if self.Lformwork>0:
            qntLines.append([self.textComment,1, self.Lformwork, None, self.Hfooting])
        return qntLines

    def getReinfConcrete(self):
        '''Return reinforcing concrete quantities to be added to a pyCost 
        project '''
        qntLines=list()
        qntLines.append([self.textComment,1, self.mnLength, self.mnWidth, self.Hfooting])
        return qntLines

    def getReinforcement(self):
        '''Return reinforcement quantities to be added to a pyCost project '''
        qntLines=list()
        if self.reinfQuant>0:
            qntLines.append([self.textComment + ' s/med. aux.',1, self.reinfQuant, None, None])
        return qntLines


class FootingRectang(FootingBase):
    '''Quantities of a rectangular-based footing foundation.

    textComment:   string to comment each measuremt line generated 
    LengthSide1, LengthSide2: sides of the rectangle
    Hfooting: height of the footing
    ThickLeanConcr: Thickness of lean concrete under foundation
    excavHeight: mean heigth of excavation (from the bottom of lean concrete)
    excavSlope: slope of excavation (H:V)
    fillingHeight: mean heigth of filling (from the bottom of lean concrete)
    reinfQuant: reinforcement quantity
    Lformwork: length of formwork (defaults to Lside1+Lside2+Lside3+Lside4)
    Lexcav: lenght of excavation (defaults to Lside1+Lside2+Lside3+Lside4)
    '''
    def __init__(self,textComment,LengthSide1,LengthSide2,Hfooting,ThickLeanConcr,excavHeight,excavSlope,fillingHeight,reinfQuant,Lformwork=None,Lexcav=None):
        if not Lformwork:
            Lformwork=2*(LengthSide1+LengthSide2)
        if not Lexcav:
            Lexcav=2*(LengthSide1+LengthSide2)
        super(FootingRectang,self).__init__(textComment,LengthSide1,LengthSide2,Hfooting,ThickLeanConcr,excavHeight,excavSlope,fillingHeight,reinfQuant,Lformwork,Lexcav)

class FootingTriang(FootingBase):
    '''Quantities of a triangular-based footing foundation.

    textComment:   string to comment each measuremt line generated 
    BaseTriang: base of the triangle
    HeightTriang: heigth of the triangle
    Hfooting: height of the footing
    ThickLeanConcr: Thickness of lean concrete under foundation
    excavHeight: mean heigth of excavation (from the bottom of lean concrete)
    excavSlope: slope of excavation (H:V)
    fillingHeight: mean heigth of filling (from the bottom of lean concrete)
    reinfQuant: reinforcement quantity
    Lformwork: length of formwork (defaults to Lside1+Lside2+Lside3+Lside4)
    Lexcav: lenght of excavation (defaults to Lside1+Lside2+Lside3+Lside4)
    '''
    def __init__(self,textComment,BaseTriang,HeightTriang,Hfooting,ThickLeanConcr,excavHeight,excavSlope,fillingHeight,reinfQuant,Lformwork=None,Lexcav=None):
        perim=round(BaseTriang+2*math.sqrt((BaseTriang/2.)**2+HeightTriang**2),2)
        if not Lformwork:
            Lformwork=perim
        if not Lexcav:
            Lexcav=perim
        super(FootingTriang,self).__init__(textComment,0.5*BaseTriang,HeightTriang,Hfooting,ThickLeanConcr,excavHeight,excavSlope,fillingHeight,reinfQuant,Lformwork,Lexcav)

class FootingTrapez(FootingBase):
    '''Quantities of a trapeizoidal-based footing foundation.

    textComment:  string to comment each measuremt line generated 
    Base1Trapez: length of base 1 of trapezoid
    Base2Trapez: length of base 2 of trapezoid
    HeightTrapez: heigth of trapezoid
    Hfooting: height of the footing
    ThickLeanConcr: Thickness of lean concrete under foundation
    excavHeight: mean heigth of excavation (from the bottom of lean concrete)
    excavSlope: slope of excavation (H:V)
    fillingHeight: mean heigth of filling (from the bottom of lean concrete)
    reinfQuant: reinforcement quantity
    Lformwork: length of formwork (defaults to Lside1+Lside2+Lside3+Lside4)
    Lexcav: lenght of excavation (defaults to Lside1+Lside2+Lside3+Lside4)
    '''
    def __init__(self,textComment,Base1Trapez,Base2Trapez,HeightTrapez,Hfooting,ThickLeanConcr,excavHeight,excavSlope,fillingHeight,reinfQuant,Lformwork=None,Lexcav=None):
        perim=round(Base1Trapez+Base2Trapez+2*math.sqrt((abs(Base1Trapez-Base1Trapez)/2.)**2+HeightTrapez**2),2)
        if not Lformwork:
            Lformwork=perim
        if not Lexcav:
            Lexcav=perim
        super(FootingTrapez,self).__init__(textComment,0.5*(Base1Trapez+Base2Trapez),HeightTrapez,Hfooting,ThickLeanConcr,excavHeight,excavSlope,fillingHeight,reinfQuant,Lformwork,Lexcav)


'''   
fot=FootingRectang('fot',2,4,Hfooting=0.75,ThickLeanConcr=0.10,excavHeight=2.75,excavSlope=3/2.,fillingHeight=1.75,reinfQuant=2750,Lformwork=6,Lexcav=7)

fot=FootingTriang('fot',2,4,Hfooting=0.75,ThickLeanConcr=0.10,excavHeight=2.75,excavSlope=3/2.,fillingHeight=1.75,reinfQuant=2750,Lformwork=6,Lexcav=7)
        
fot=FootingTrapez('fot',2,4,1.5,Hfooting=0.75,ThickLeanConcr=0.10,excavHeight=2.75,excavSlope=3/2.,fillingHeight=1.75,reinfQuant=2750,Lformwork=6,Lexcav=7)
'''        
        
    
    
