# Model wing-wall and chamfer (IR) - initial right
vDir=(stackPinitHeadWall[1]-stackPinitHeadWall[0]).normalize()
ptIRwingwall=stackPinitHeadWall[1]-struct.getSkewWallTh()*vDir
if 'deltaZ_top_aletaIR' in locals():
    ptIRwingwall=ptIRwingwall+deltaZ_top_aletaIR*Vector(0,0,1)
v=struct.getVectFrontalView()
vDirLn=gu.getRotatedVector(v,vZpos,angIRww)
vDirTr=vDirLn.cross(vZneg)
wingWallIR=underpass.Wingwall(placementPoint=ptIRwingwall,
                              foundLevel=Z_IRww-vTransfCoord.z,
                              wallLenght=lenIRww,
                              wallSlope=wallSlopeIRww,
                              wallTopWidth=IRww_data['wallTopWidth'],
                              backFaceSlope=IRww_data['backFaceSlope'],
                              frontFaceSlope=IRww_data['frontFaceSlope'],
                              vDirTr=vDirTr,
                              vDirLn=vDirLn,
                              dispLn=dispLnIR,
                              )
wwIR,stackPntWwIR=wingWallIR.genWingwall()
footIR,stackPntFootIR=wingWallIR.genWingwallFoundation(
    footsLength=[lenIRww],
    footsHeight=[IRww_data['footHeight']],
    footsWidth=[IRww_data['footWidth']],
    footsToeWidth=[IRww_data['footToeWidth']])
chamferIR=dt.draw_triang_prism(
    p1=ptIRwingwall,
    p2=ptIRwingwall+struct.getSkewWallTh()*vDir,
    p3=ptIRwingwall+vDirLn*dispLnIR,
    vAxis=Vector(0,0,-hMaxIR),
    )
Part.show(wwIR,'wwIR')
Part.show(footIR,'footIR')
Part.show(chamferIR,'chamferIR')
